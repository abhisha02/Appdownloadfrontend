{"ast":null,"code":"import{jwtDecode}from\"jwt-decode\";import axios from\"axios\";// Function to refresh and update the user token\nconst updateUserToken=async()=>{const refreshToken=localStorage.getItem(\"refresh\");const baseURL=\"http://127.0.0.1:8000/\";if(!refreshToken)return false;// Handle no refresh token case\ntry{const res=await axios.post(\"\".concat(baseURL,\"api/token/refresh/\"),{refresh:refreshToken});if(res.status===200){// Store new tokens\nlocalStorage.setItem(\"access\",res.data.access);localStorage.setItem(\"refresh\",res.data.refresh);// Decode new access token\nconst decoded=jwtDecode(res.data.access);// Return user authentication data\nreturn{user_id:decoded.user_id,email:decoded.email,first_name:decoded.first_name,last_name:decoded.last_name,isAuthenticated:true,is_admin:decoded.is_admin,is_active:decoded.is_active,is_staff:decoded.is_staff,date_joined:decoded.date_joined};}}catch(error){localStorage.clear();return false;}};// Function to check user authentication status\nconst isAuthUser=async()=>{const accessToken=localStorage.getItem(\"access\");if(!accessToken){return{isAuthenticated:false};}const currentTime=Date.now()/1000;const decoded=jwtDecode(accessToken);if(decoded.exp>currentTime){// Token is valid, return authentication data\nreturn{user_id:decoded.user_id,email:decoded.email,first_name:decoded.first_name,last_name:decoded.last_name,isAuthenticated:true,is_manager:decoded.is_manager,is_active:decoded.is_active,is_staff:decoded.is_staff,date_joined:decoded.date_joined};}else{// Token expired, attempt to refresh it\nconst updateSuccess=await updateUserToken();return updateSuccess;}};export default isAuthUser;","map":{"version":3,"names":["jwtDecode","axios","updateUserToken","refreshToken","localStorage","getItem","baseURL","res","post","concat","refresh","status","setItem","data","access","decoded","user_id","email","first_name","last_name","isAuthenticated","is_admin","is_active","is_staff","date_joined","error","clear","isAuthUser","accessToken","currentTime","Date","now","exp","is_manager","updateSuccess"],"sources":["D:/AndroidAppdownloadportalApp/Andoridappdownloadfrontend/Appdownload/src/utils/isAuthUser.jsx"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\r\nimport axios from \"axios\";\r\n\r\n\r\n// Function to refresh and update the user token\r\nconst updateUserToken = async () => {\r\n  const refreshToken = localStorage.getItem(\"refresh\");\r\n  const baseURL = \"http://127.0.0.1:8000/\";\r\n\r\n  if (!refreshToken) return false; // Handle no refresh token case\r\n\r\n  try {\r\n    const res = await axios.post(`${baseURL}api/token/refresh/`, { refresh: refreshToken });\r\n\r\n    if (res.status === 200) {\r\n      // Store new tokens\r\n      localStorage.setItem(\"access\", res.data.access);\r\n      localStorage.setItem(\"refresh\", res.data.refresh);\r\n\r\n      // Decode new access token\r\n      const decoded = jwtDecode(res.data.access);\r\n\r\n      // Return user authentication data\r\n      return {\r\n        user_id: decoded.user_id,\r\n        email: decoded.email,\r\n        first_name: decoded.first_name,\r\n        last_name: decoded.last_name,\r\n        isAuthenticated: true,\r\n        is_admin: decoded.is_admin,\r\n        is_active: decoded.is_active,\r\n        is_staff: decoded.is_staff,\r\n        date_joined: decoded.date_joined,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    localStorage.clear();\r\n    return false;\r\n  }\r\n};\r\n\r\n// Function to check user authentication status\r\nconst isAuthUser = async () => {\r\n  const accessToken = localStorage.getItem(\"access\");\r\n\r\n  if (!accessToken) {\r\n    return { isAuthenticated: false }; \r\n  }\r\n\r\n  const currentTime = Date.now() / 1000;\r\n  const decoded = jwtDecode(accessToken);\r\n\r\n  if (decoded.exp > currentTime) {\r\n    // Token is valid, return authentication data\r\n    return {\r\n      user_id: decoded.user_id,\r\n      email: decoded.email,\r\n      first_name: decoded.first_name,\r\n      last_name: decoded.last_name,\r\n      isAuthenticated: true,\r\n      is_manager: decoded.is_manager,\r\n      is_active: decoded.is_active,\r\n      is_staff: decoded.is_staff,\r\n      date_joined: decoded.date_joined,\r\n    };\r\n  } else {\r\n    // Token expired, attempt to refresh it\r\n    const updateSuccess = await updateUserToken();\r\n    return updateSuccess;\r\n  }\r\n};\r\n\r\nexport default isAuthUser;"],"mappings":"AAAA,OAASA,SAAS,KAAQ,YAAY,CACtC,MAAO,CAAAC,KAAK,KAAM,OAAO,CAGzB;AACA,KAAM,CAAAC,eAAe,CAAG,KAAAA,CAAA,GAAY,CAClC,KAAM,CAAAC,YAAY,CAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CACpD,KAAM,CAAAC,OAAO,CAAG,wBAAwB,CAExC,GAAI,CAACH,YAAY,CAAE,MAAO,MAAK,CAAE;AAEjC,GAAI,CACF,KAAM,CAAAI,GAAG,CAAG,KAAM,CAAAN,KAAK,CAACO,IAAI,IAAAC,MAAA,CAAIH,OAAO,uBAAsB,CAAEI,OAAO,CAAEP,YAAa,CAAC,CAAC,CAEvF,GAAII,GAAG,CAACI,MAAM,GAAK,GAAG,CAAE,CACtB;AACAP,YAAY,CAACQ,OAAO,CAAC,QAAQ,CAAEL,GAAG,CAACM,IAAI,CAACC,MAAM,CAAC,CAC/CV,YAAY,CAACQ,OAAO,CAAC,SAAS,CAAEL,GAAG,CAACM,IAAI,CAACH,OAAO,CAAC,CAEjD;AACA,KAAM,CAAAK,OAAO,CAAGf,SAAS,CAACO,GAAG,CAACM,IAAI,CAACC,MAAM,CAAC,CAE1C;AACA,MAAO,CACLE,OAAO,CAAED,OAAO,CAACC,OAAO,CACxBC,KAAK,CAAEF,OAAO,CAACE,KAAK,CACpBC,UAAU,CAAEH,OAAO,CAACG,UAAU,CAC9BC,SAAS,CAAEJ,OAAO,CAACI,SAAS,CAC5BC,eAAe,CAAE,IAAI,CACrBC,QAAQ,CAAEN,OAAO,CAACM,QAAQ,CAC1BC,SAAS,CAAEP,OAAO,CAACO,SAAS,CAC5BC,QAAQ,CAAER,OAAO,CAACQ,QAAQ,CAC1BC,WAAW,CAAET,OAAO,CAACS,WACvB,CAAC,CACH,CACF,CAAE,MAAOC,KAAK,CAAE,CACdrB,YAAY,CAACsB,KAAK,CAAC,CAAC,CACpB,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,KAAM,CAAAC,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,KAAM,CAAAC,WAAW,CAAGxB,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAElD,GAAI,CAACuB,WAAW,CAAE,CAChB,MAAO,CAAER,eAAe,CAAE,KAAM,CAAC,CACnC,CAEA,KAAM,CAAAS,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CACrC,KAAM,CAAAhB,OAAO,CAAGf,SAAS,CAAC4B,WAAW,CAAC,CAEtC,GAAIb,OAAO,CAACiB,GAAG,CAAGH,WAAW,CAAE,CAC7B;AACA,MAAO,CACLb,OAAO,CAAED,OAAO,CAACC,OAAO,CACxBC,KAAK,CAAEF,OAAO,CAACE,KAAK,CACpBC,UAAU,CAAEH,OAAO,CAACG,UAAU,CAC9BC,SAAS,CAAEJ,OAAO,CAACI,SAAS,CAC5BC,eAAe,CAAE,IAAI,CACrBa,UAAU,CAAElB,OAAO,CAACkB,UAAU,CAC9BX,SAAS,CAAEP,OAAO,CAACO,SAAS,CAC5BC,QAAQ,CAAER,OAAO,CAACQ,QAAQ,CAC1BC,WAAW,CAAET,OAAO,CAACS,WACvB,CAAC,CACH,CAAC,IAAM,CACL;AACA,KAAM,CAAAU,aAAa,CAAG,KAAM,CAAAhC,eAAe,CAAC,CAAC,CAC7C,MAAO,CAAAgC,aAAa,CACtB,CACF,CAAC,CAED,cAAe,CAAAP,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}